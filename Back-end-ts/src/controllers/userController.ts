import { Request, Response } from "express";
import { isValidEmail, isValidPassword, isValidName } from "../utils/validationUtils";
import {
  hashPassword,
  comparePassword,
  generateToken,
} from "../utils/authUtils";
import { findByEmail, create, currentDelee, update } from "../models/userModel";
import jwt from "jsonwebtoken";
import { UserJwtPayload } from "../@types/express";


export const getUser = async (req: Request, res: Response) => {
  const { emaill } = req.params;

  if (!isValidEmail(emaill))
    return res.status(400).json({ message: "E-mail inválido." });
  try {
    const user = findByEmail(emaill);
    if (!user) {
      return res.status(404).json({ error: "User not found" });
    }

    res.json(user);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Failed to fetch user" });
  }
};

export const login = async (req: Request, res: Response) => {
  const { email, password } = req.body;

  if (!isValidEmail(email))
    return res.status(400).json({ message: "E-mail inválido." });

  try {
    const user = await findByEmail(email);
    if (!user) {
      return res.status(401).json({ message: "E-mail ou senha inválidos." });
    }

    const isPasswordMatch = await comparePassword(password, user.password);
    if (!isPasswordMatch)
      return res.status(401).json({ message: "Senha inválida." });

    const token = generateToken(user);

    return res.status(200).json({ token });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Não foi possivel fazer o login." });
  }
};

export const createUser = async (req: Request, res: Response) => {
  const { email, name } = req.body;
  let { password } = req.body;
  try {
    if (!isValidEmail(email))
      return res.status(400).json({ message: "E-mail inválido." });

    if (!isValidPassword)
      return res.status(400).json({ message: "Senha inválido." });

    if (!isValidName(name)) return res.status(400).json({ message: "Nome inválido." });

    const criptPassword = await hashPassword(password);
    password = criptPassword;

    // Assuming id will be generated by the database/model, use a placeholder or omit if allowed
    const user = await create(name, email, password);
    res.status(201).json(user);
  } catch (error) {
    console.error("Erro ao criar usuario.", error);
    res.status(500).json({ error: "Failed to create user" });
  }
};

export const deleteUserByToken = async (req: Request, res: Response) => {
  const { password } = req.body;
  const user: UserJwtPayload = req.user as UserJwtPayload;

  if (!password && isValidPassword(password))
    return res.status(400).json({ message: "senha é obrigatórios." });

  try {
    const dbuser = await findByEmail(user.email);
    if (!dbuser) {
      return res.status(404).json({ message: "Usuário não encontrado." });
    }

    const isPasswordMatch = await comparePassword(password, dbuser.password);

    if (!isPasswordMatch) {
      return res.status(401).json({ message: "Senha incorreta." });
    }

    const deletedUser = await currentDelee(user.email);
    return res
      .status(200)
      .json({ message: "Perfil deletado com sucesso.", deletedUser });
  } catch (error) {
    console.error(error);
    if (error instanceof jwt.JsonWebTokenError) {
      return res.status(403).json({ message: "Token inválido ou expirado." });
    }
    return res.status(500).json({ message: "Erro ao deletar perfil." });
  }
};

export const updateUserByToken = async (req: Request, res: Response) => {
  try {
    const { name, email, password } = req.body;
    const userEmail: UserJwtPayload = req.user as UserJwtPayload;

    let dataToUpdate: any = {};

    if(name) dataToUpdate.name = name
    if(email) dataToUpdate.email = email
    if(password) {
      dataToUpdate.password = await hashPassword(password)
    }
    
    const updatedUser = await update(userEmail.email, dataToUpdate);

    return res.status(200).json({
      message: "Perfil atualizado com sucesso.",
      updatedUser,
    });
  } catch (error) {
    console.error("Erro ao atualizar o perfil:", error);
    return res.status(500).json({ message: "Erro ao atualizar o perfil." });
  }
};
